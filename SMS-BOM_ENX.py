import marshal, base64, os, time, platform, hashlib
#ENCODED BY : ZUYAN
#GITHUB : ZUYANx
#FACEBOOK: ZUYANx
encoded_data = ''
exec(marshal.loads(base64.b64decode(encoded_data)))
